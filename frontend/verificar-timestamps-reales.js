// Script para verificar la conversi√≥n de timestamps con datos reales del Arduino
console.log('üîç VERIFICANDO CONVERSI√ìN DE TIMESTAMPS CON DATOS REALES...');

// Datos reales del Arduino (de la consola)
const timestampArduino = 2337303240; // Ejemplo de la consola
console.log('Timestamp del Arduino:', timestampArduino);

// Aplicar la misma l√≥gica que en el c√≥digo
let timestampMs = timestampArduino;

if (timestampArduino < 10000000000) {
  timestampMs = timestampArduino * 1000;
  console.log('üîÑ Timestamp convertido:', timestampArduino, '‚Üí', timestampMs);
} else {
  console.log('‚ö†Ô∏è Timestamp ya est√° en milisegundos');
}

// Crear fecha
const fecha = new Date(timestampMs);
console.log('Fecha convertida:', fecha.toLocaleString('es-CL'));

// Verificar diferencia de tiempo
const ahora = Date.now();
const diferenciaMs = ahora - timestampMs;
const diferenciaSeg = Math.floor(diferenciaMs / 1000);

console.log('Diferencia de tiempo:', diferenciaSeg, 'segundos');

// Verificar si deber√≠a estar conectado
const estaConectado = diferenciaMs < 60000;
console.log('Deber√≠a estar conectado:', estaConectado ? '‚úÖ S√ç' : '‚ùå NO');

// Verificar que no sea 1970
if (fecha.getFullYear() === 1970) {
  console.log('‚ùå ERROR: Fecha sigue siendo 1970');
  console.log('   Posible causa: El timestamp no se est√° convirtiendo correctamente');
} else {
  console.log('‚úÖ CORRECTO: Fecha convertida correctamente');
  console.log('   A√±o:', fecha.getFullYear());
}
